FROM python:3.10-alpine

RUN apk add --no-cache build-base


RUN apk add --no-cache gmp-dev  # Install GMP development package

RUN addgroup -S app && adduser -S -G app app

ENV PYTHONPATH=/usr/lib/python3.10/site-packages
# https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE
# Prevents Python from writing .pyc files to disk
ENV PYTHONDONTWRITEBYTECODE 1

# ensures that the python output is sent straight to terminal (e.g. your container log)
# without being first buffered and that you can see the output of your application (e.g. django logs)
# in real time. Equivalent to python -u: https://docs.python.org/3/using/cmdline.html#cmdoption-u
ENV PYTHONUNBUFFERED 1
ENV ENVIRONMENT prod
ENV TESTING 0



# use built-in pip to access poetry
RUN pip install --progress-bar off "poetry==1.7.0"

WORKDIR /app
COPY README.md /app/

# start installing things with poetry
COPY ./pyproject.toml ./poetry.lock* /app/

# Set CMAKE_BUILD_PARALLEL_LEVEL to limit the number of threads
# Adjust the value (e.g., 2) based on the available resources and trial/error.
ENV CMAKE_BUILD_PARALLEL_LEVEL 2
#  Project initialization:
RUN poetry config virtualenvs.create false && poetry install --no-interaction





# Copy poetry.lock* in case it doesn't exist in the repo
#COPY ./app/pyproject.toml ./app/poetry.lock* /app/

# Allow installing dev dependencies to run tests
ARG INSTALL_DEV=false

RUN if [ "$INSTALL_DEV" = "true" ] ; then poetry install --no-root ; else poetry install --no-root --no-dev ; fi

# For development, Jupyter remote kernel, Hydrogen
# Using inside the container:
# jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
ARG INSTALL_JUPYTER=false
RUN if [ "$INSTALL_JUPYTER" = "true" ] ; then pip install jupyterlab ; fi

ENV C_FORCE_ROOT=1

WORKDIR /app
COPY . /app


ENV PYTHONPATH=/app

# Expose the necessary port
EXPOSE 80



CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]












vim src/caddy/Caddyfile



newfileneme.............................................................................................................................



origins = [
    "http://184.94.215.245:8443",
    "https://184.94.215.245:8443",
    "https://localhost:8443",
    "http://localhost:8443",
    "https://localhost",
    "http://localhost",
    "http://localhost:8080",
    "https://bitfriendly.me",
]









FROM python:3.10



# ARG YOUR_ENV

# ENV YOUR_ENV=${YOUR_ENV} \
#   PYTHONFAULTHANDLER=1 \
#   PYTHONUNBUFFERED=1 \
#   PYTHONHASHSEED=random \
#   PIP_NO_CACHE_DIR=off \
#   PIP_DISABLE_PIP_VERSION_CHECK=on \
#   PIP_DEFAULT_TIMEOUT=100 \
#   POETRY_VERSION=1.7.0



# use built-in pip to access poetry
RUN pip install --progress-bar off "poetry==1.7.0"

WORKDIR /app
COPY README.md /app/

# start installing things with poetry
COPY ./pyproject.toml ./poetry.lock* /app/
RUN poetry config virtualenvs.create false
RUN poetry install




# Copy poetry.lock* in case it doesn't exist in the repo
#COPY ./app/pyproject.toml ./app/poetry.lock* /app/

# Allow installing dev dependencies to run tests
ARG INSTALL_DEV=false
RUN bash -c "if [ $INSTALL_DEV == 'true' ] ; then poetry install --no-root ; else poetry install --no-root --no-dev ; fi"

# For development, Jupyter remote kernel, Hydrogen
# Using inside the container:
# jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
ARG INSTALL_JUPYTER=false
RUN bash -c "if [ $INSTALL_JUPYTER == 'true' ] ; then pip install jupyterlab ; fi"

ENV C_FORCE_ROOT=1

WORKDIR /app
COPY . /app 


ENV PYTHONPATH=/app

# Expose the necessary port
EXPOSE 80



CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
